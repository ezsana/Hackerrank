15 points: 3;
20 points: 6;
25 points: 9;
30 points: 6;

Day of the programmer: 15 points
- it was difficult not to think as a developer but as a tester;
- even with very simple unit tests you need to think properly through every possible test case and edge cases;
- after all of my test cases passed, the code also passed the hackerrank test cases.

Big sorting: 20 points
- unclear acceptance criteria
- my tests only tested integer but not BigInt => I needed to change them
- working with BigInt is more complicated
- time limit is a problem (my tests didn't cover that), I need to refactor the code
- output was just the String[], not needed to print it out

Chocolate Feast: 25 points
- concentrating on one test to pass at a time;
- one test was wrong! Beware!!!
- all tests passing except performance - time limits! => refactoring needed;

Cavity Map: 30 points
- huge misunderstanding in requirements (parameters of method cavityMap) =>
  * method theoretically does the right thing but in reality not
- changed all the tests => experience how bad it is if one misunderstands the requirements

Circular Array Rotation: 20 points
- only tests with time limit didn't pass

Designer pdf: 20 points
- not too much testcase, not on Hackerrank either

Electronic Shop: 15 points
- nothing special, all tests (Hackerrank as well) passed;

Cut The Sticks: 25 points
- sometimes test cases coming up when solving the challenge (moreThanOneLastElement);

Encryption: 30 points - medium
- no answer in the requirements if len(s) = 3 after removing spaces => it's 1,7, but
    row is 1 and columns are two => impossible:
    aaa or aa a - neither satisfies the constraints;
    => last example: 8: same problem, got the solution

Equalize The Array: 20 points
- again thinking about the solution, not the test cases BUT
- when I start to solve the task, I realize that there are more test cases;

Fair Rations: 25 points
- even <=> even!
- I don't know if there's a mathematical solution for this? What is the theory? => checking the discussions
- how to print out a String if the return value must be az int??? => change the main method (from the discussions)
  => because of this, requirements not clear. => I changed method signature from int to String return value and changed main method at Hackerrank.
- if everybody has even number of breads at the beginning, should I give bread anyway??? => I had to check the test cases to find out that, no
   don't have to.
=====>>>> big conclusion: find the first odd number and make it even by adding 1 to it (and then changes all the others)
- it was very hard for me to understand exactly what the task was but eventually all tests passed! :)

Find Digits: 25 points
- pretty straightforward task, nothing special
- only two testcases on Hackerrank;

Flatland Space Stations: 25 points
- requirements not clear again:
  * n = number of cities
  * m = 1-BASED index of city that has space station
  * FIRST example is according to the above (n = 3, m = 1, first city has station)
 <====> BUT
  * next example: n = 5; m = [0,4] - now this is NOT 1-based index, city 0 and city 4 has stations
  ==> The second case is valid.
- solution should be more clean and shorter => needs refactoring

Happy Ladybugs: 30 points
- At first I couldn't find the solution theory behind this so the tests were ad hoc but eventually I got it.
- All tests passed.

Lisas Workbook: 25 points
- Again test was wrong => took a quarter an hour to find out :( => checking all tests

Manasa And Stones: 30 points
- Pretty straightforward task, I couldn't find any special test cases

Picking Numbers: 20 points
- Straightforward task, nothing special
- All tests passed for the first attempt - including Hackerrank tests

Strange Counter: 30 points
- Straightforward, but Hackerrank tests with time limits didn't pass

Taum And B'day: 25 points
- Was not clear what the z unit meant
- Explanation of the task was a huge help
- int --> long change in parameters

The Grid Search:
- testcases coming up when solving tests
- testcases from Hackerrank I didn't think of => to find the weakness of my solution
- on e test failed, need to rewrite the solution

The Time In Words:
- straightforward task but lot of if-statements in the solution